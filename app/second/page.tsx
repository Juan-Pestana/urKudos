import Head from 'next/head'
import { pb } from '../../sevices/pocketBase'
import { cookies, headers } from 'next/headers'
//import { json } from 'stream/consumers'
import PocketBase from 'pocketbase'
import { json } from 'stream/consumers'

export const dynamic = 'auto',
  dynamicParams = true,
  revalidate = 0,
  fetchCache = 'auto',
  runtime = 'nodejs'

async function initPocketBase() {
  const pb = new PocketBase('http://127.0.0.1:8090')

  // load the store data from the request cookie string
  const pbauthData = cookies().get('pb_auth')?.value || ''
  //console.log(pbauthData)

  await pb.authStore.loadFromCookie(`pb_auth=${pbauthData}`)

  // send back the default 'pb_auth' cookie to the client with the latest store state
  // pb.authStore.onChange(() => {
  //   cookies().set('pb_auth', pb.authStore.exportToCookie())

  // })

  try {
    // get an up-to-date auth store state by verifying and refreshing the loaded auth model (if any)
    pb.authStore.isValid && (await pb.collection('users').authRefresh())
    //console.log(pb.authStore.model)
  } catch (_) {
    // clear the auth store on failed refresh

    pb.authStore.clear()
  }

  return pb
}

const getPosts = async () => {
  const pb = await initPocketBase()
  //console.log(cookies().getAll())

  const records = await pb
    .collection('posts')
    .getFullList(200, { expand: 'owner' })
  return records as any[]

  //const headersList = cookies().getAll()
  //const referer = headersList.get('authorization')
  //console.log(headersList)

  //console.log(headersList)

  //return headersList
}

export default async function SecondPage() {
  const result = await getPosts()

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <pre>{JSON.stringify(result, null, 2)}</pre>
      </div>
    </>
  )
}
